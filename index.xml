<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Cody Site</title>
    <link>https://www.madongming.com/</link>
    <description>Recent content in Home on Cody Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© {year}</copyright>
    <lastBuildDate>Thu, 04 Feb 2021 19:32:28 +0800</lastBuildDate><atom:link href="https://www.madongming.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create a project from 0 to 1</title>
      <link>https://www.madongming.com/technologies/createproject0-1/</link>
      <pubDate>Mon, 24 May 2021 16:37:32 +0800</pubDate>
      
      <guid>https://www.madongming.com/technologies/createproject0-1/</guid>
      <description>-先随便定一个小目标，基于IPFS的备份系统- &amp;ndash; 搭建三个节点的ipfs- &amp;ndash; 提供备份的api- &amp;ndash; 简单版本的客户端-
确定两个产品方向
 养老 宠物  </description>
    </item>
    
    <item>
      <title>Ansi Common lisp 读书笔记 1</title>
      <link>https://www.madongming.com/technologies/commonlisp-1/</link>
      <pubDate>Tue, 09 Feb 2021 21:27:53 +0800</pubDate>
      
      <guid>https://www.madongming.com/technologies/commonlisp-1/</guid>
      <description>第三章 构造 因为 lisp 的所有对象本质上都是 list，所以所有的构造归根结底都是list的操作，即cons car cdr
等式  eql 对象是否相等（包括引用的地址），也可视为判断是否是一个符号 equal 对象值是否相等  指针 lisp 没有指针，只是引用。 lisp 会处理赋值的时候什么时候使用指针，什时候创建新的对象，主要考虑执行效率来决定。 因为 lisp 是有垃圾回收的，从诞生的时候就有。所以只要使用的值所占内存大于指针所占的内存，赋值的时候都是指针。之后交给垃圾回收去处理。 PS：我理解 setf 赋值都是指针，函数返回为创建新的对象</description>
    </item>
    
    <item>
      <title>Ansi Common lisp 读书笔记 0</title>
      <link>https://www.madongming.com/technologies/commonlisp-0/</link>
      <pubDate>Tue, 09 Feb 2021 16:24:34 +0800</pubDate>
      
      <guid>https://www.madongming.com/technologies/commonlisp-0/</guid>
      <description>第一、二章 简单认识一下lisp 根据 SICP 课程的提出的，认识一门语言需要问的三个问题
 它的最基本单元是什么 它是怎么组合这些单元的 它抽象这些组合方法是什么 这本书我们都带着这些问题去看  表示方法 首先，lisp 和传统的编程语言有一点很不一样。它模糊了数据和方法，统一使用 “s 表达式” 来表示。 例如函数，不再是声明一个名字和参数列表，之后实现它这种结构，而是像写一个表达式
(defun sum (n) (let ((s 0)) (dotimes (i n s) (incf s i))))  类似的，它的数据也是如此表示
&#39;(1 2 3)  &amp;ldquo;&#39;&amp;rdquo; 单引号的作用是一个语法糖，方便的表示后面的是数据，不是需要求值的表达式
lisp 还有一个符号的概念，这里没有介绍太清楚。只是先了解有这个东西，还有他也可以是被求值的，但是一般用的时候不需要求值，所以引用的时候也使用单引号来引用
&#39;Symbol  结构 lisp 是一个循环自解释的系统 它会把自己语言的高级抽象，通过自己的语言来展开，之后求值。如果要求值的表达式还是比较高级的抽象，会又重新进行展开，之后再求值。这样一直循环到可以用最基础的实现来求值，得出最后结果的过程
列表操作符  cons 链接 list 的第一个元素和后面的部分 car 取 list 的第一个元素 cdr 取 list 除了第一个元素后面的部分  谓词 一般的，在 lisp 做条件判断的错作符称作谓词，一般为了可读性，自定义的谓词使用“p”结尾，例如
(listp &#39;(a b c))  这个表达式求是判断（a b c）是否是list。值的结果是真，用 “t” 表示 上面的结果会返回</description>
    </item>
    
    <item>
      <title>耻辱柱</title>
      <link>https://www.madongming.com/shames/shames/</link>
      <pubDate>Thu, 04 Feb 2021 22:52:40 +0800</pubDate>
      
      <guid>https://www.madongming.com/shames/shames/</guid>
      <description>记录一些低级错误，耻辱事件 在公司release程序的前几小时，删掉了打包机器的环境。 时间 2008年某天
过程 多次要求我清理系统空间。但因为不熟悉打包系统环境，一开始是拒绝的，多次要求后，我清理了。
总结 不清楚，千万不要动，更别提删除
泄漏重要密钥 时间 2018年某天
过程 在发布出去的二进制程序中包含了敏感信息。
总结 不要以为二进制真的是010101，反汇编可以看到很多信息。对于计算机要始终保持不信任。
sql语句未退出 时间 2020年7月1日
过程 执行大负载sql语句，在未执行完成时Ctrl+C退出客户端，但实际sql执行还在继续，执行了数小时。
总结 对计算机保持不信任。之前类似的情况已经验证过，sql语句会退出，但此次没有。其中原因可能是各种，但是在人不能总是考虑全面的情况下，只能选择不信任计算机，反复验证。</description>
    </item>
    
    <item>
      <title>pullrequest 的事</title>
      <link>https://www.madongming.com/technologies/pullrequest-thing/</link>
      <pubDate>Thu, 04 Feb 2021 17:33:10 +0800</pubDate>
      
      <guid>https://www.madongming.com/technologies/pullrequest-thing/</guid>
      <description>pullrequest，看上去很简单，一般就是一个分支合并到另一个分支，在研究了gitea的compare部分的代码后，觉得还是挺复杂的。
约定 首先，明确 base 和 head，要建立一个pullrequest，就是将一个分支 merge 到 一个分支：
base &amp;lt;- head
明确了 base 和 head，下面会用 baseXXX 和 headXXX 表示 base 的相关元素或head 的相关元素。
代码逻辑叙述 首先要获取compare的信息，进入ParseCompareInfo函数
baseRepo 从 ctx 中获取，也就是 path 中的 owner/repo
从路径的“*”中取出这些信息
格式支持三种：
 {:baseBranch}…{:headBranch} {:baseBranch}…{:headOwner}:{:headBranch} {:baseBranch}…{:headOwner}/{:headRepoName}:{:headBranch}  首先，一定是“…”分割的两部分，将其组合成列表infos，如果不是就报错。
infoPath = ctx.Params(&amp;quot;*&amp;quot;) infos := strings.SplitN(infoPath, &amp;quot;...&amp;quot;, 2) if len(infos) != 2 { ... }  在ctx的Data中存在的数据将会用作模版替换，这里设置BaseName，是从前面获取的baseRepo中取得，baseBranch是从infos的第一个元素，也就是“…”前面的内容。也在ctx的Data中保存baseBranch。
ctx.Data[&amp;quot;BaseName&amp;quot;] = baseRepo.OwnerName baseBranch := infos[0] ctx.Data[&amp;quot;BaseBranch&amp;quot;] = baseBranch  三个点分割的后半部是head的定义，如果这部分里没有“：”分割，那说明pullrequest的两个分支同属一个repo，headUser就是ctx中repo的owner，也就是baseOwner（目前看是，后面也可能变化），headBranch就是三个点后面的部分。如果有“：”分割（一定是一个冒号，可就是分为两部分）
headInfos := strings.</description>
    </item>
    
    <item>
      <title>关于远程办公</title>
      <link>https://www.madongming.com/lifes/id-remote-work/</link>
      <pubDate>Thu, 04 Feb 2021 16:30:52 +0800</pubDate>
      
      <guid>https://www.madongming.com/lifes/id-remote-work/</guid>
      <description>由于我是it行业的从业者，只讨论it行业的事。在疫情之前，为了能够不受办公地里位置的限制我就开始了远程办公。所以在疫情开始后，并没有对我的生活有多大的改变
在准备远程远程办公之前，也查了一些资料，经过自己的实际体验，有了一些总结：
对于用人方，需要有强大的管理能力， 明确的责任划分。包括但不仅包括项目的规划能力，子任务的划分能力，进度的把控能力，风险的规避能力，协调组织能力。同时对工作的人员给予信任。 对于工作方，需要有强大的自制力。包括但不仅包括时间规划能力，执行能力，沟通能力，owner的意识。 从角色方面讲，分为以下几个方面：
项目经理， 以产品的收益为最终目标。对所有子任务管理和推动负责。此外需要有以下责任：产品的最终描述；项目的规划；风险评估；子任务的划分；进度的管理。 架构师，以产品的质量为最终目标。对产品的最终形态负责，包括产品的部署结构；软件的架构；模块划分；辅助产品经理的子任务划分；测试用例的确认；成本的规划。 测试，对测试用例负责。 开发，软件产品的实现负责。 运营，对产品转化负责。包括产品形态的建议，用户反馈的收集等。 运维，对产品的服务质量负责。 其实这些在非远程办公模式的公司也是如此，但是在远程的模式下，这些划分会更严格，并不可或缺。可以一人身负多责任，但是责任不能缺少。
远程办公，所以工具也需要在Internet，不能在Intranet。虽然vpn可以解决Intranet的问题，但是体验很糟糕。
对于使用公有云IaaS，SaaS，PaaS，aPaaS等，如果你的产品不是这些中的某一层本身，那么应该使用这些服务。但要使用云原生的方案，以免被绑定在某个服务商上。
项目管理系统，设计系统，代码管理系统，持续继承持续交付（ci/cd），测试系统，bug、问题追踪系统，文档系统，邮件系统。每个系统都是必须的，因为在线上，系统的规则重要度是人不能取代的。
此外对于远程办公，结算系统也能使项目的成本既效率更明确。按工时，按项目，按模块，按bug/issues等等对多维度方式结算的支持。
人力系统也是也是一个比较重要的方面，但是目前因为远程办公大部分是“小作坊”模式，需求也是非核心业务占大部分，所以都以网络平台发广告来解决，没有人才库以及标准的录取流程。这一点还需要用人方的意识转变。</description>
    </item>
    
    <item>
      <title>换电记</title>
      <link>https://www.madongming.com/lifes/change-the-battery/</link>
      <pubDate>Sat, 02 May 2020 21:31:21 +0800</pubDate>
      
      <guid>https://www.madongming.com/lifes/change-the-battery/</guid>
      <description>我的 macbook pro 是 2015 年中期的，在 apple 召回换电的范围内。知道这个消息能有一年了吧。看官方的说法，换电需要一到两周的时间，但是由于手头只有一个笔记本电脑，也没有PC，工作又不能停，所以就一直没去。
由于我的笔记本一直都在架上放着
直到上周来成都“旅居”，把笔记本放在宾馆的桌子上，才发现已经放不稳了，底板鼓包了。
赶快查查 apple 的换电服务还有没有！嗯，是有的！，不小心看到这个图片（下面图片来自网络，没有版权），我的就是这里鼓起来了，还是赶快换吧。
最近的春熙路太古里今天还有得约，由于白天还要工作，可能还需要对别人支持，所以约了晚上18:15。
这可不算完，换电服务官方的说明需要一到两周，我是一定无法接受没有笔记本的，现在可是纯为自己打工，一天不干活不会有人管，但是就会少挣一天钱啊！于是我就询问 apple 客服，在这种维修期间时是否备用机可以用借。得到的答复是没有，具体怎么样，要跟门店协商。我又说：”我也不想去换电，去维修我也是被迫的，已经出现了电池变形的情况。我只有这一台笔记本，没有了我就没法工作了，造成的损失让我去接受也不太合适吧？如果真的没有备用的笔记本，我就买一台，修好了我的笔记本再退掉。你们有这样的政策，14天内可以无理由退换”。可那边说：“这样也可以的，我们14天以内都是可以无理由退换的，但是具体还是要和门店联系，我相信会有一个满意的答复的，怎么也不能让您耽误工作”。于是我联系了门店，结果还是没有备用机。我就又和门店说了没有备用机我就买台新的之后退掉。可她回答说，也是可以的。。。居然如此“土豪”。
备份了数据，到时间，我去了太古里的 apple store。天才吧的人验收了货，我又和他说了一遍买新电脑的事，他也说这样也是，可行！好吧，你们都这么爽快，我也就不客气了，下楼开始选电脑。macbook air、macbook、macbook pro、iMac、apple Mini。。。看了好几圈。air、book、 pro 都是新款，全部都是 usb type-c 没有 传统的 usb 接口。由于我的备份硬盘是 usb 的，为了用几天的电脑买个转换头，之后也没有任何用处，太不合适了，mac Mini 在宾馆也不想用宾馆的电视做显示器，也不合适，最终瞄准了iMac。iMac 都太大了。。。难搬啊！最小的吧，最后买了一台 21 寸的 2019 款，刷卡提货回宾馆。
虽然是 21 寸最小的iMac，但是包装还是觉得十分的大。
开机。。。。。。。。。。。。。。
为什么我要用这么多点呢？因为是真的慢啊，都 2020 年了居然还有这么慢的电脑。
等了好久终于开完机了，恢复数据吧。。。。。。！！！！！XXXXXXX
这一串标点表示了我的反应，一开始还是慢，之后报错，系统不兼容，要升级系统，于是又是很漫长的等待。下载系统更新还是很快的，宾馆是每屋一个电信的光纤100M的带宽，但是刚来的时候，用他的WIFI才20-30M，还好我带了自己的 linksys，装上之后是可以跑到上限了。重启安装，这里觉得等了半个多小时，进度条都没有动！强制重启，又进入了就系统，再此重启安装，不过这次快了不少，最起码进度条动了。不知道等了多久，终于升级完系统了，继续进行恢复，等啊等啊。。。。。从买电脑回来大约19点多，到恢复完成，已经第二天2点多了，7个小时！！！。点击 app 运行，它在那里跳，跳啊跳。。。你跳吧我睡觉了。点击（预）运行了常用的 app，关了屏幕，睡觉。
第二天一早，起来就看它，ok，程序运行起来了。。。。这不是很正常的事么，但是我觉得可真是不容易啊！
用了它一天，我是真想念我 5 年前的笔记本，这个怎么差距这么大？不是混合硬盘么？不是纯的sata硬盘吧？ssd 的作用呢？一点没有呢？煎熬啊。
第三天，中午的时候终于来电话了，笔记本修好了，出乎意料的快了。但是还是要压住，不能急，先把今天的活干了。但是 4 点多我忍不住先跑了，实在不想用这电脑了。
径直一路奔向 apple store，虽然今天太古里人真多，美女也真多，但是没有时间看，我要去取回我的“宝贝儿”！今天 apple store 里人真多
退货的时候还是不好意思说了谎，以公司发了新的笔记本，这个用不上为理由退的，之后又出去转了一圈才又进来上的二楼，去取笔记本。由于拆机换电需要卸掉面和键盘，所以说会换新的面板和键盘。终于见到了它了！板换了新的面板！新的键盘！新的。。。。电池么？是因为是新电池没电所以开不了机么？？？黑屏！！！难道我又要和它分别了么？？？在店员“重置”的操作下，它终于亮了。看来“大修” macbook 都需要这个操作吧？他们也都轻车熟路，遇到刚修好的电脑开不了机没有一点紧张。嗯！新的电池，循环次数1。</description>
    </item>
    
  </channel>
</rss>
